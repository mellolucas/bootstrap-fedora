---
# DNF Packages ----------------------------------------
- name: apps | install dnf packages
  become: true
  tags: 
    - dnf
  vars:
    packages: "{{ dnf | json_query('@.*[]') }}"
  timeout: 300
  dnf:
    state: present
    update_cache: true
    name: "{{ packages }}"
  notify:
    - reload systemd

# Flatpak Packages ----------------------------------------
- name: apps | install flatpak packages
  tags:
    - flatpak
  loop: "{{ flatpak | dict2items }}"
  when: flatpak | length > 0
  timeout: 300
  community.general.flatpak:
    state: present
    remote: "{{ item.key }}"
    name: "{{ item.value | list }}"
    method: user
  ignore_errors: true 

# Snap Packages ----------------------------------------
- name: apps | install snap packages
  become: true
  tags:
    - snap 
    - round2
  ignore_errors: true
  timeout: 300
  block:
    - name: regular snap installation
      snap:
        state: present
        name: "{{ snap }}"
      when: snap | length > 0
    - name: classic snap installation
      snap:
        state: present
        classic: true
        name: "{{ snap_classic }}"
      when: snap_classic | length > 0

# Python Packages (pip) ----------------------------------------
- name: apps | install python packages
  tags:
    - pip
    - python
  timeout: 300
  block:
    - name: install packages
      pip:
        state: present
        name: "{{ pip }}"
        extra_args: --user
    - name: find local glib directory
      find:
        file_type: directory
        paths: "{{ base_dir.local }}/share"
        use_regex: true
        patterns: "glib"
      register: path_local_glib
    - name: compile user-wide glib schemas
      vars:
        glib_schemas: "{{ path_local_glib.files[0].path + '/schemas' }}"
      when: glib_schemas is directory
      command: glib-compile-schemas {{ glib_schemas }}

# Third Party RPM Packages ----------------------------------------
- name: apps | install third party rpm packages with dnf
  become: true
  tags: 
    - rpm
    - rpm_third
    - dnf_external
  timeout: 600
  dnf:
    state: present
    update_cache: true
    name: "{{  dnf_external | json_query('@.*') }}"
  notify:
    - reload systemd


# Third Party RPM Packages ----------------------------------------
# displaylink ----------
- name: apps | set displaylink driver installation type
  ansible.builtin.set_fact:
    displaylink_install_type: "devel" # devel or release

- name: apps | install displaylink drivers from source with dnf
  become: yes
  tags:
    - round2
    - displaylink
    - from_source
  vars:
    gh_repo: "https://api.github.com/repos/{{ github.displaylink }}/releases/latest"
    jp:
      "assets[?
        contains(browser_download_url, '{{ distribution.name }}') && 
        contains(browser_download_url, '{{ arch }}')
      ].browser_download_url | sort(@) | reverse(@)[0]"
  when: github.displaylink | length > 0 and displaylinkl_install_type == 'release'
  timeout: 300
  block:
    - name: check if any displaylink hardware exists
      shell: lsusb -v | grep -i displaylink
      register: displaylink_connected
    - name: get latest release from github repo
      when: displaylink_connected.rc == 0
      uri:
        url: "{{ gh_repo }}"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
      register: data_release
    - name: install rpm
      when: displaylink_connected.rc == 0 and 
      dnf:
        state: latest
        disable_gpg_check: true
        name: "{{ data_release.json | to_json | from_json | json_query(jp) }}"

- name: apps | build install displaylink devel drivers from source
  tags:
    - round2
    - displaylink
    - from_source
  vars:
    host_installer: "www.synaptics.com"
    path_installer: "products/displaylink-graphics/downloads/ubuntu"
  when: github.displaylink | length > 0 and displaylink_install_type == 'devel'
  timeout: 300
    - name: fetch installer url
      uri:
        url: "https://{{ host_installer }}/{{ path_installer }}"
        return_content: true
      register: data_fetched
    - name: find installer
      ansible.builtin.set_fact:
        url_installer: >-
          https://{{ host_installer }}/{{ 
            data_fetched.content |
            regex_search('/sites/default/files/release.*.txt') |
            regex_replace('release_notes', 'exe_files') |
            regex_replace('Release.*', 'EXE.zip') 
          }}
    - name: create temp dir
      ansible.builtin.tempfile:
        state: directory
        suffix: displaylinkdriver
      register: tempdir
    - name: download installer
      ansible.builtin.unarchive:
        src: "{{ url_installer }}"
        dest: "{{ tempdir.path }}"
        remote_src: true
    - name: find installer exe file
      ansible.builtin.find:
        path: "{{ tempdir.path }}"
        patterns: 'displaylink*'
      register: file_installer
    - name: extract installer content
      ansible.builtin.shell:
        cmd: "{{ file_installer.files[0].path }} --noexec --keep"
        chdir: "{{ tempdir.path }}"
    - name: modify installer script for compatibility
      ansible.builtin.replace:
        path: >-
          {{ 
            file_installer.files[0].path | regex_replace('.run', '') 
          }}/displaylink-installer.sh
        regexp: "{{ item.pattern }}"
        replace: "{{ item.replace }}"
      loop:
        - { "pattern": " apt ", "replace": " dnf " }
        - { "pattern": "--simulate", "replace": "--assumeno" }
        - { "pattern": "libc6-deve?l?", "replace": "glibc-devel" }
        - { "pattern": "libdrm-deve?l?", "replace": "libdrm-devel" }
    - name: clone displaylink-rpm repo
      ansible.builtin.git:
        repo: "https://github.com/{{ github.displaylink }}.git"
        dest: "{{ tempdir.path }}/displaylink-rpm"
        clone: true
        update: true
        recursive: true
        track_submodules: true
    - name: make devel
      ansible.builtin.shell:
        cmd: make devel
        chdir: "{{ tempdir.path }}/displaylink-rpm"
    - name: find evdi release file
      ansible.builtin.find:
        path: "{{ tempdir.path }}/displaylink-rpm"
        patterns: 'v*'
      register: file_evdi
    - name: create evdi_release dir
      file:
        state: directory
        path: "{{ tempdir.path }}/evdi_release"
        mode: 0755
    - name: extract evdi release components
      ansible.builtin.unarchive:
        src: "{{ file_evdi.files[0].path }}"
        dest: "{{ tempdir.path }}/evdi_release"
        remote_src: true
        extra_opts:
          - --strip-components=1
    - name: compress devel release and replace evdi dkms module with it
      community.general.archive:
        path: "{{ tempdir.path }}/evdi_release/*"
        dest: >-
          {{ 
            file_installer.files[0].path | regex_replace('.run', '') 
          }}/evdi.tar.gz
        format: gz
    - name: run the modified installer script
      become: true
      ansible.builtin.shell:
        cmd: >-
          {{ 
            file_installer.files[0].path | regex_replace('.run', '') 
          }}/displaylink-installer.sh
        chdir: "{{ file_installer.files[0].path | regex_replace('.run', '') }}" 


# Binaries From Source ----------------------------------------
# nerdctl ----------
- name: apps | install nerdctl binaries from source
  become: yes
  tags:
    - containerd
    - nerdctl
    - from_source
  vars:
    arch_alt: "{% if arch == 'x86_64' %}amd64{% else %}{{ arch }}{% endif %}" 
    gh_repo: "https://api.github.com/repos/{{ github.nerdctl }}/releases/latest"
    jp:
      "assets[?
        contains(browser_download_url, '{{arch_alt }}') &&
        contains(browser_download_url, '{{ system }}') &&
        contains(browser_download_url, 'full')
      ].browser_download_url | sort(@) | reverse(@)[0]"
  when: github.nerdctl is defined
  timeout: 600
  block:
    - name: get latest release from github repo
      uri:
        url: "{{ gh_repo }}"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
      register: data
    - name: install binaries
      ansible.builtin.unarchive:
        src: "{{ data.json | to_json | from_json | json_query(jp) }}"
        dest: /usr/local
        remote_src: true

# fira-code font ----------
- name: apps | install fira code font with ligatures from nerd fonts
  tags:
    - layout
    - from_source
  vars:
    gh_repo: "https://api.github.com/repos/{{ github.nerd_fonts }}/releases/latest"
    jp:
      "assets[?
        contains(name, 'FiraCode')
      ].browser_download_url | sort(@) | reverse(@)[0]"
    dir_out: "{{ base_dir.local }}/share/fonts/FiraCode"
  when: github.nerd_fonts is defined
  timeout: 600
  block:
    - name: get latest release from github repo
      uri:
        url: "{{ gh_repo }}"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
      register: data
    - name: create out directory
      file:
        state: directory
        path: "{{ dir_out }}"
        mode: 0755
    - name: install binaries
      ansible.builtin.unarchive:
        src: "{{ data.json | to_json | from_json | json_query(jp) }}"
        dest: "{{ dir_out }}"
        remote_src: true
        include: [
          "Fira Code Light Nerd Font Complete.ttf",
          "Fira Code Regular Nerd Font Complete.ttf",
          "Fira Code Retina Nerd Font Complete.ttf",
          "Fira Code Medium Nerd Font Complete.ttf",
          "Fira Code SemiBold Nerd Font Complete.ttf",
          "Fira Code Bold Nerd Font Complete.ttf",
          "Fira Code Light Nerd Font Complete Mono.ttf",
          "Fira Code Regular Nerd Font Complete Mono.ttf",
          "Fira Code Retina Nerd Font Complete Mono.ttf",
          "Fira Code Medium Nerd Font Complete Mono.ttf",
          "Fira Code SemiBold Nerd Font Complete Mono.ttf",
          "Fira Code Bold Nerd Font Complete Mono.ttf"
        ]
